Core Agile Concepts


Agile Approach
- Iterative
- Incremental
- Change-driven
- Agile
- Scrum
- XP
- Lean
- Cyrstal Light

Agile Approach: Key Characteristics

Iterative:

Meaning: Agile follows an iterative process, where work is broken into repeated cycles (iterations), each with planning, execution, review, and adjustment.
Key Feature: After each iteration, feedback is gathered, and improvements are made for the next cycle.
Benefit: Allows continuous refinement of the product, reducing the risk of large-scale errors and ensuring alignment with customer needs.
Example: In Scrum, this is represented by sprints (usually 1-4 weeks), where teams deliver working increments of the product in each sprint.

Incremental:

Meaning: In Agile, the product is built in small, incremental pieces, where each increment adds new functionality or features to the product.
Key Feature: Each increment is functional and usable, meaning the product can be released at any time, even if it's not fully complete.
Benefit: Provides early delivery of value to customers and allows for regular feedback and adjustments.
Example: In software, each iteration may deliver a set of features like login, search, or checkout, gradually building up the full product.

Change-Driven:

Meaning: Agile is responsive to change. Changes in requirements or customer feedback are embraced, and the project adapts accordingly, even late in the development process.
Key Feature: Agile teams are flexible and can quickly adjust priorities or features based on evolving needs or insights.
Benefit: Enables teams to deliver products that better meet customer needs, as they can adjust quickly to market changes or new information.
Example: A team may pivot the product’s direction based on new insights gained after each iteration, adding features that weren't initially planned.


THE AGILE MANIFESTO VALUES

- Individuals and interactions over processes and tools
- Working software over comprehensive documentation
- Customer collaboration over contract negotiation
- Responding to change over following a plan


AGILE IN MOTION

Imagine a software development team working on a new mobile app. Here's how Agile in motion might look:

Sprint Planning: The team meets at the start of the sprint to select user stories from the product backlog based on priority. They plan the work for the sprint and define the acceptance criteria.

Daily Standups: Every day, the team gathers for a quick 15-minute standup where each person shares what they worked on yesterday, what they will work on today, and any blockers they’re facing.

Development and Testing: The team starts coding, testing, and integrating new features. As they progress, they might discover a better solution, so they adapt and iterate on the feature.

Review and Feedback: At the end of the sprint, the team demonstrates the completed work to stakeholders and gathers feedback. The Product Owner might decide to prioritize a new feature or change some of the requirements.

Retrospective: After the sprint review, the team holds a retrospective to reflect on what went well and what could be improved. They agree on action items for improving their processes in the next sprint.

Next Sprint: The process starts again with a new sprint planning meeting, and the cycle continues.

LEADING AGILE TEAMS

Five Dysfunctions of a Team

- Absence of trust
- Fear of conflict
- Lack of commitment
- Avoidance of accountability
- Inattention to results (Inspection, Quality Control, Ensure product is working for the end user)

LAUNCHING AND AGILE PROJECT

- Creating and agile charter (Authorize the project and project manager)
- Ceremony to kick off the project (View on delivering MVP ASAP)

Velocity - Measure of capacity per sprint. Measured in story point

Project cycle time refers to the total time it takes to complete a project from start to finish, including all the phases and activities involved. It encompasses the entire process, from the initiation of the project through to its closure and delivery of the final product or service.

Defect cycle time refers to the total time it takes to resolve a defect or issue, from the moment it is identified (or reported) until it is fixed and verified as resolved. It is an important metric used in quality management and software development (but applicable in other industries as well) to measure how efficiently a team is able to address and resolve defects or bugs that arise during a project or product development process.

CALCULATING COMPLETION TIME